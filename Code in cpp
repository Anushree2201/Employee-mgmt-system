#include <iostream>
#include <iomanip> // For formatting output
#include <cstring> // For string handling functions
using namespace std;

class Employee {
private:
    int EmpID;
    char EmpName[50];
    char Post[30];
    float Salary;
public:
    void ReadData();
    void DisplayRecord();
    int GetID();
    char* GetPost();
};

// Member function to read employee data
void Employee::ReadData() {
    cout << endl << "Enter Employee ID: ";
    cin >> EmpID;
    cout << "Enter Employee Name: ";
    cin.ignore(); // To handle newline character
    cin.getline(EmpName, 50);
    cout << "Enter Post: ";
    cin.getline(Post, 30);
    cout << "Enter Salary: ";
    cin >> Salary;
}

// Member function to display employee data
void Employee::DisplayRecord() {
    cout << endl << "--------------------------------";
    cout << endl << "Employee ID: " << EmpID;
    cout << endl << "Name: " << EmpName;
    cout << endl << "Post: " << Post;
    cout << endl << "Salary: " << Salary;
    cout << endl << "--------------------------------";
}

// Function to return employee ID
int Employee::GetID() {
    return EmpID;
}

// Function to return employee post
char* Employee::GetPost() {
    return Post;
}

int main() {
    Employee employees[100]; // Array to store multiple employees
    int choice, count = 0, id, found;

    do {
        cout << "\n********** Employee Management System **********";
        cout << "\n1. Add New Employee";
        cout << "\n2. Display All Employees";
        cout << "\n3. Search Employee by ID";
        cout << "\n4. Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1: // Add new employee
            employees[count].ReadData();
            count++;
            break;

        case 2: // Display all employees
            if (count == 0) {
                cout << "No employees found!";
            } else {
                for (int i = 0; i < count; i++) {
                    employees[i].DisplayRecord();
                }
            }
            break;

        case 3: // Search employee by ID
            cout << "Enter Employee ID to search: ";
            cin >> id;
            found = 0;
            for (int i = 0; i < count; i++) {
                if (employees[i].GetID() == id) {
                    employees[i].DisplayRecord();
                    found = 1;
                    break;
                }
            }
            if (!found) {
                cout << "Employee with ID " << id << " not found!";
            }
            break;

        case 4: // Exit
            cout << "Exiting...";
            break;

        default:
            cout << "Invalid choice!";
        }
    } while (choice != 4);

    return 0;
}
